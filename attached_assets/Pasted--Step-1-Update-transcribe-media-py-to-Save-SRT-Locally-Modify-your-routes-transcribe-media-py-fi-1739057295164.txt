🔹 Step 1: Update transcribe_media.py to Save SRT Locally
Modify your /routes/transcribe_media.py file to save the SRT file locally inside Replit and make it downloadable.

📝 Modify transcribe_media.py
python
Copy
Edit
import os
import whisper
from flask import Flask, request, jsonify, send_from_directory

app = Flask(__name__)

# Define folder to store SRT files
SRT_FOLDER = "srt_files"
os.makedirs(SRT_FOLDER, exist_ok=True)  # Ensure the folder exists

# Load Whisper Model once
model = whisper.load_model("base")

@app.route("/transcribe-media", methods=["POST"])
def transcribe_media():
    data = request.json
    media_url = data.get("media_url")

    if not media_url:
        return jsonify({"error": "Media URL is required"}), 400

    # Step 1: Download the media file
    video_path = os.path.join(SRT_FOLDER, "input_video.mp4")
    download_success = download_media(media_url, video_path)
    
    if not download_success:
        return jsonify({"error": "Failed to download media file"}), 400

    # Step 2: Transcribe using Whisper
    result = model.transcribe(video_path)
    srt_content = format_srt(result["segments"])

    # Step 3: Save the SRT file
    srt_filename = "output.srt"
    srt_path = os.path.join(SRT_FOLDER, srt_filename)

    with open(srt_path, "w", encoding="utf-8") as f:
        f.write(srt_content)

    return jsonify({
        "message": "SRT file generated successfully.",
        "srt_url": f"/download/{srt_filename}"
    })

def download_media(url, save_path):
    """Downloads a media file from a given URL."""
    import requests
    response = requests.get(url, stream=True)

    if response.status_code != 200:
        return False  # Download failed

    with open(save_path, "wb") as file:
        for chunk in response.iter_content(chunk_size=1024):
            file.write(chunk)
    
    return True  # Download successful

def format_srt(segments):
    """Formats Whisper transcript output into SRT format."""
    srt_text = ""
    for i, segment in enumerate(segments, start=1):
        start = format_time(segment["start"])
        end = format_time(segment["end"])
        text = segment["text"]
        srt_text += f"{i}\n{start} --> {end}\n{text}\n\n"
    
    return srt_text

def format_time(seconds):
    """Converts time in seconds to SRT time format."""
    millisec = int((seconds % 1) * 1000)
    minutes, seconds = divmod(int(seconds), 60)
    hours, minutes = divmod(minutes, 60)
    return f"{hours:02}:{minutes:02}:{seconds:02},{millisec:03}"

# Endpoint to serve SRT files for download
@app.route("/download/<filename>")
def download_srt(filename):
    return send_from_directory(SRT_FOLDER, filename, as_attachment=True)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)
🔹 Step 2: How This Works on Replit
User Sends a POST Request to /transcribe-media with a media URL.
The video is downloaded locally into the srt_files/ folder in Replit.
The Whisper model transcribes the video and creates an SRT file.
The SRT file is saved locally inside Replit in srt_files/output.srt.
The API returns a URL to download the SRT file (/download/output.srt).
User can access the SRT file by visiting:
perl
Copy
Edit
http://<your-replit-url>/download/output.srt
This lets them edit and save the SRT file before using it.
🔹 Step 3: Testing on Replit
Test API Using Curl
Run this in your Replit shell:

sh
Copy
Edit
curl -X POST http://localhost:5000/transcribe-media \
     -H "Content-Type: application/json" \
     -d '{"media_url": "https://your-video-url.mp4"}'
✅ If successful, it will return:

json
Copy
Edit
{
    "message": "SRT file generated successfully.",
    "srt_url": "/download/output.srt"
}
🔹 Step 4: Edit the SRT File
After the API generates the SRT file, you can edit it manually inside Replit.
Open the srt_files/output.srt file in Replit’s file explorer and edit the subtitles.
